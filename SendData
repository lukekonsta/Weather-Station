[code]
#include <WaspLoRaWAN.h>
#include <WaspSensorAgr_v30.h>

//////////////////////////////////////////////
uint8_t socket = SOCKET0;
//////////////////////////////////////////////

// define radio settings
//////////////////////////////////////////////
uint8_t power = 15;
uint32_t frequency;
char spreading_factor[] = "sf12";
char coding_rate[] = "4/5";
uint16_t bandwidth = 125;
char crc_mode[] = "on";
//////////////////////////////////////////////
uint8_t error;


// variable to store the number of pending pulses
float point = 0;
float secondMinus = 0;
float newResult = 0;





// define data to send
char data[] = "0102030405060708090A0B0C0D0E0F";




float temp, humd, pres, watermark1, leafvalue, anemometer;
int pendingPulses;
watermarkClass wmSensor1(SOCKET_1);
leafWetnessClass lwSensor;
//Instance object
weatherStationClass vaneSensor;
weatherStationClass weather;
char *vane;
char nodeID[] = "node_WS";



void setup()
{
  USB.ON();
  Agriculture.ON();
  RTC.ON();

  // module setup
  error = radioModuleSetup();

  // Check status
  if (error == 0)
  {
    USB.println(F("Module configured OK"));
  }
  else
  {
    USB.println(F("Module configured ERROR"));
  }

}


void loop()
{


  //pluvio

  /////////////////////////////////////////////
  // 1. Enter sleep mode
  /////////////////////////////////////////////
  PWR.deepSleep("00:00:00:05", RTC_OFFSET, RTC_ALM1_MODE2, ALL_ON);
  //Agriculture.sleepAgr("00:00:00:00", RTC_ABSOLUTE, RTC_ALM1_MODE4, SENSOR_ON, SENS_AGR_PLUVIOMETER);

  /////////////////////////////////////////////
  // 2.1. check pluviometer interruption
  /////////////////////////////////////////////
  if ( intFlag & PLV_INT)
  {

    //USB.println(F("+++ PLV interruption +++"));

    pendingPulses = intArray[PLV_POS];

    //USB.print(F("Number of pending pulses:"));
    //USB.println( pendingPulses );

    for (int i = 0 ; i < pendingPulses; i++)
    {
      // Enter pulse information inside class structure
      weather.storePulse();

      // decrease number of pulses
      intArray[PLV_POS]--;
    }

    // Clear flag

    intFlag &= ~(PLV_INT);
  }

  /////////////////////////////////////////////
  // 2.2. check RTC interruption
  /////////////////////////////////////////////
  if (intFlag & RTC_INT)
  {

    //USB.println(F("Second"));
    //USB.println(point);
    if (newResult > 0) {
      newResult = 0;
      USB.println(newResult);
    } else {
      USB.println(newResult);
    }

    intFlag &= ~(RTC_INT);

  }

  else

  {

    //USB.println(F("Third"));
    Agriculture.sleepAgr("00:00:00:00", RTC_ABSOLUTE, RTC_ALM1_MODE4, SENSOR_ON, SENS_AGR_PLUVIOMETER);
    point =  weather.readPluviometerCurrent();
    newResult = point - secondMinus;
    USB.println(newResult);
    secondMinus = point;

  }

  //pluvio-end


  ///////////////////////////////////////
  // 1. Read BME280: temp, hum, pressure
  ///////////////////////////////////////

  temp = Agriculture.getTemperature();
  humd  = Agriculture.getHumidity();
  pres = Agriculture.getPressure();
  watermark1 = wmSensor1.readWatermark();
  leafvalue = lwSensor.getLeafWetness();
  anemometer = weather.readAnemometer();
  vaneSensor.getVaneFiltered();
  switch (vaneSensor.vaneDirection)
  {
    case  SENS_AGR_VANE_N   :
      vane = "N";
      break;
    case  SENS_AGR_VANE_NNE :
      vane = "NNE";
      break;
    case  SENS_AGR_VANE_NE  :
      vane = "NE";
      break;
    case  SENS_AGR_VANE_ENE :
      vane = "ENE";
      break;
    case  SENS_AGR_VANE_E   :
      vane = "E";
      break;
    case  SENS_AGR_VANE_ESE :
      vane = "ESE";
      break;
    case  SENS_AGR_VANE_SE  :
      vane = "SE";
      break;
    case  SENS_AGR_VANE_SSE :
      vane = "SSE";
      break;
    case  SENS_AGR_VANE_S   :
      vane = "S";
      break;
    case  SENS_AGR_VANE_SSW :
      vane = "SSW";
      break;
    case  SENS_AGR_VANE_SW  :
      vane = "SW";
      break;
    case  SENS_AGR_VANE_WSW :
      vane = "WSW";
      break;
    case  SENS_AGR_VANE_W   :
      vane = "W";
      break;
    case  SENS_AGR_VANE_WNW :
      vane = "WNW";
      break;
    case  SENS_AGR_VANE_NW  :
      vane = "WN";
      break;
    case  SENS_AGR_VANE_NNW :
      vane = "NNW";
      break;
  }


  USB.println(temp);
  USB.println(humd);
  USB.println(pres);
  USB.println(watermark1);
  USB.println(leafvalue);
  USB.println(anemometer);
  USB.println(vane);
  USB.println(newResult);
  USB.println();


  char temperature[15];
  dtostrf(temp, 4, 2, temperature);
  USB.println(temperature);

  char humidity[15];
  dtostrf(humd, 4, 2, humidity);
  USB.println(humidity);

  char pressure[15];
  dtostrf(pres, 7, 2, pressure);
  USB.println(pressure);

  char watermark[15];
  dtostrf(watermark1, 4, 2, watermark);
  USB.println(watermark);

  char leaf[15];
  dtostrf(leafvalue, 4, 2, leaf);
  USB.println(leaf);

  char anemo[15];
  dtostrf(anemometer, 4, 2, anemo);
  USB.println(anemo);

  char pluvio[15];
  dtostrf(newResult, 4, 2, pluvio);
  USB.println(pluvio);


  char *out;

  if ((out = (char *)malloc(strlen(temperature) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out, temperature);
    strcat(out, "\n");
  }



  char *out2;

  if ((out2 = (char *)malloc(strlen(out) +  strlen(humidity) + 1)) != NULL)
  {
    strcpy(out2, out);
    strcat(out2, humidity);
  }



  char *out3;

  if ((out3 = (char *)malloc(strlen(out2) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out3, out2);
    strcat(out3, "\n");
  }




  char *out4;

  if ((out4 = (char *)malloc(strlen(out3) + strlen(pressure) + 1)) != NULL)
  {
    strcpy(out4, out3);
    strcat(out4, pressure);
  }


  char *out5;

  if ((out5 = (char *)malloc(strlen(out4) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out5, out4);
    strcat(out5, "\n");
  }

  char *out6;

  if ((out6 = (char *)malloc(strlen(out5) + strlen(watermark) + 1)) != NULL)
  {
    strcpy(out6, out5);
    strcat(out6, watermark);
  }


  char *out7;

  if ((out7 = (char *)malloc(strlen(out6) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out7, out6);
    strcat(out7, "\n");
  }


  char *out8;

  if ((out8 = (char *)malloc(strlen(out7) + strlen(leaf) + 1)) != NULL)
  {
    strcpy(out8, out7);
    strcat(out8, leaf);
  }


  char *out9;

  if ((out9 = (char *)malloc(strlen(out8) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out9, out8);
    strcat(out9, "\n");
  }





  char *out10;

  if ((out10 = (char *)malloc(strlen(out9) + strlen(anemo) + 1)) != NULL)
  {
    strcpy(out10, out9);
    strcat(out10, anemo);
  }


  char *out11;

  if ((out11 = (char *)malloc(strlen(out10) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out11, out10);
    strcat(out11, "\n");
  }


  char *out12;

  if ((out12 = (char *)malloc(strlen(out11) + strlen(vane) + 1)) != NULL)
  {
    strcpy(out12, out11);
    strcat(out12, vane);
  }

  char *out13;

  if ((out13 = (char *)malloc(strlen(out12) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out13, out12);
    strcat(out13, "\n");
  }

  char *out14;

  if ((out14 = (char *)malloc(strlen(out13) + strlen("\n") + 1)) != NULL)
  {
    strcpy(out14, out13);
    strcat(out14, pluvio);
  }





  //USB.println("!!!");
  //USB.println(out12);





  char buffer[120];


  //char charVal1[10];
  //dtostrf(out12, 4, 3, charVal1);//4 is mininum width, 3 is precision; float value is copied onto buff

  if (!string_to_hexstring(out14, buffer, sizeof(buffer))) {
  }
  USB.println(1);
  USB.println(buffer);

  error = LoRaWAN.sendRadio(buffer);

  // Check status
  if (error == 0)
  {
    USB.println(F("--> Packet sent OK"));
  }
  else
  {
    USB.print(F("Error waiting for packets. error = "));
    USB.println(error, DEC);
  }








}



bool string_to_hexstring(char *string, char *hexstring, uint16_t hexstring_length)
{
  uint16_t hexstring_index = 0;
  while (string[hexstring_index / 2] != 0 && hexstring_index < hexstring_length - 2)
  {
    char c = string[hexstring_index / 2];
    byte nib1 = (c >> 4) & 0x0F;
    byte nib2 = (c >> 0) & 0x0F;
    hexstring[hexstring_index++] = nib1  < 0xA ? '0' + nib1  : 'A' + nib1  - 0xA;
    hexstring[hexstring_index++] = nib2  < 0xA ? '0' + nib2  : 'A' + nib2  - 0xA;
  }
  hexstring[hexstring_index++] = 0;
  return string[hexstring_index / 2] == 0;
}





/***********************************************************************************

  radioModuleSetup()

    This function includes all functions related to the module setup and configuration
    The user must keep in mind that each time the module powers on, all settings are set
    to default values. So it is better to develop a specific function including all steps
    for setup and call it everytime the module powers on.


***********************************************************************************/
uint8_t radioModuleSetup()
{

  uint8_t status = 0;
  uint8_t e = 0;

  //////////////////////////////////////////////
  // 1. switch on
  //////////////////////////////////////////////

  e = LoRaWAN.ON(socket);

  // Check status
  if (e == 0)
  {
    USB.println(F("1. Switch ON OK"));
  }
  else
  {
    USB.print(F("1. Switch ON error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));

  if (LoRaWAN._version == RN2483_MODULE)
  {
    frequency = 868100000;
  }
  else if (LoRaWAN._version == RN2903_MODULE)
  {
    frequency = 902300000;
  }


  //////////////////////////////////////////////
  // 2. Enable P2P mode
  //////////////////////////////////////////////

  e = LoRaWAN.macPause();

  // Check status
  if (e == 0)
  {
    USB.println(F("2. P2P mode enabled OK"));
  }
  else
  {
    USB.print(F("2. Enable P2P mode error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));



  //////////////////////////////////////////////
  // 3. Set/Get Radio Power
  //////////////////////////////////////////////

  // Set power
  e = LoRaWAN.setRadioPower(power);

  // Check status
  if (e == 0)
  {
    USB.println(F("3.1. Set Radio Power OK"));
  }
  else
  {
    USB.print(F("3.1. Set Radio Power error = "));
    USB.println(e, DEC);
    status = 1;
  }

  // Get power
  e = LoRaWAN.getRadioPower();

  // Check status
  if (e == 0)
  {
    USB.print(F("3.2. Get Radio Power OK. "));
    USB.print(F("Power: "));
    USB.println(LoRaWAN._radioPower);
  }
  else
  {
    USB.print(F("3.2. Get Radio Power error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));



  //////////////////////////////////////////////
  // 4. Set/Get Radio Frequency
  //////////////////////////////////////////////

  // Set frequency
  e = LoRaWAN.setRadioFreq(frequency);

  // Check status
  if (e == 0)
  {
    USB.println(F("4.1. Set Radio Frequency OK"));
  }
  else
  {
    USB.print(F("4.1. Set Radio Frequency error = "));
    USB.println(e, DEC);
    status = 1;
  }

  // Get frequency
  e = LoRaWAN.getRadioFreq();

  // Check status
  if (e == 0)
  {
    USB.print(F("4.2. Get Radio Frequency OK. "));
    USB.print(F("Frequency: "));
    USB.println(LoRaWAN._radioFreq);
  }
  else
  {
    USB.print(F("4.2. Get Radio Frequency error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));



  //////////////////////////////////////////////
  // 5. Set/Get Radio Spreading Factor (SF)
  //////////////////////////////////////////////

  // Set SF
  e = LoRaWAN.setRadioSF(spreading_factor);

  // Check status
  if (e == 0)
  {
    USB.println(F("5.1. Set Radio SF OK"));
  }
  else
  {
    USB.print(F("5.1. Set Radio SF error = "));
    USB.println(e, DEC);
    status = 1;
  }

  // Get SF
  e = LoRaWAN.getRadioSF();

  // Check status
  if (e == 0)
  {
    USB.print(F("5.2. Get Radio SF OK. "));
    USB.print(F("Spreading Factor: "));
    USB.println(LoRaWAN._radioSF);
  }
  else
  {
    USB.print(F("5.2. Get Radio SF error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));



  //////////////////////////////////////////////
  // 6. Set/Get Radio Coding Rate (CR)
  //////////////////////////////////////////////

  // Set CR
  e = LoRaWAN.setRadioCR(coding_rate);

  // Check status
  if (e == 0)
  {
    USB.println(F("6.1. Set Radio CR OK"));
  }
  else
  {
    USB.print(F("6.1. Set Radio CR error = "));
    USB.println(e, DEC);
    status = 1;
  }

  // Get CR
  e = LoRaWAN.getRadioCR();

  // Check status
  if (e == 0)
  {
    USB.print(F("6.2. Get Radio CR OK. "));
    USB.print(F("Coding Rate: "));
    USB.println(LoRaWAN._radioCR);
  }
  else
  {
    USB.print(F("6.2. Get Radio CR error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));



  //////////////////////////////////////////////
  // 7. Set/Get Radio Bandwidth (BW)
  //////////////////////////////////////////////

  // Set BW
  e = LoRaWAN.setRadioBW(bandwidth);

  // Check status
  if (e == 0)
  {
    USB.println(F("7.1. Set Radio BW OK"));
  }
  else
  {
    USB.print(F("7.1. Set Radio BW error = "));
    USB.println(e, DEC);
  }

  // Get BW
  e = LoRaWAN.getRadioBW();

  // Check status
  if (e == 0)
  {
    USB.print(F("7.2. Get Radio BW OK. "));
    USB.print(F("Bandwidth: "));
    USB.println(LoRaWAN._radioBW);
  }
  else
  {
    USB.print(F("7.2. Get Radio BW error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));



  //////////////////////////////////////////////
  // 8. Set/Get Radio CRC mode
  //////////////////////////////////////////////

  // Set CRC
  e = LoRaWAN.setRadioCRC(crc_mode);

  // Check status
  if (e == 0)
  {
    USB.println(F("8.1. Set Radio CRC mode OK"));
  }
  else
  {
    USB.print(F("8.1. Set Radio CRC mode error = "));
    USB.println(e, DEC);
    status = 1;
  }

  // Get CRC
  e = LoRaWAN.getRadioCRC();

  // Check status
  if (e == 0)
  {
    USB.print(F("8.2. Get Radio CRC mode OK. "));
    USB.print(F("CRC status: "));
    USB.println(LoRaWAN._crcStatus);
  }
  else
  {
    USB.print(F("8.2. Get Radio CRC mode error = "));
    USB.println(e, DEC);
    status = 1;
  }
  USB.println(F("-------------------------------------------------------"));


  return status;
}
[/code]
